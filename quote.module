<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function quote_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows users to quote other posts.');
  }
}

/**
 * Implementation of hook_menu().
 */
function quote_menu($may_cache) {
  if (!$may_cache) {
    // Reference quote.css, if it exists.
    theme_add_style(drupal_get_path('module', 'quote') .'/quote.css');
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function quote_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('
    <h3 id="filter-quote">Quote filter</h3>
    <p>Quoted content can be placed between [quote] tags in order to be displayed as an indented quote. Every [quote] tag <em>must</em> have a corresponding [/quote] tag. For example: 
   <pre>[quote]This is a simple quote.[/quote]</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Quote:</div>This is a simple quote.</div>
    <p>Additionally, there is an optional attribute which allows quotes to specify the original author.
    <pre>[quote=Mr. Drupal]This is a quote with an attribution line.[/quote]
</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Mr. Drupal wrote:</div>This is a quote with an attribution line.</div>
    <p>Finally, multiple [quote] tags can be nested within one another. Just remember that every [quote] tag <strong>must</strong> have a corresponding [/quote] tag.
    <pre>
    [quote]I think she says it best...
    [quote=Ms. Quotation]This is a quote nested within another quote.[/quote]
    but you can\'t argue with
    [quote=Ms. Reply]The more quotes, the merrier.
    Just don\'t get too carried away.[/quote]
    And I have nothing more to say.[/quote]</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Quote:</div>I think she says it best...
    <div class="quote-msg"><div class="quote-author">Ms. Quotation wrote:</div>This is a quote nested within another quote.</div>
    but you can\'t argue with
    <div class="quote-msg"><div class="quote-author">Ms. Reply wrote:</div>The more quotes, the merrier. Just don\'t get too carried away.</div>
    And I have nothing more to say.</div>
    ');
  }
  else {
    return t('You may quote other posts using <a href="%quote_help">[quote] tags</a>.', array("%quote_help" => url("filter/tips/$format", NULL, 'filter-quote')));
  }
}

/**
 * Implementation of hook_link().
 */
function quote_link($type, $post = 0, $main = 0) {
  $links = array();

  if (user_access('post comments')) {
    // $post can be either a node or a comment.
    if ($type == 'comment') {
      // Display quote link for comments only if the parent node is accepting comments.
      $node = node_load(arg(1));
      if (variable_get("quote_{$node->type}_enabled", 0) && $node->comment == COMMENT_NODE_READ_WRITE) {
        $links[] = l(t('quote'), "comment/reply/$post->nid/$post->cid/", array('title' => t('Quote this comment in your reply.')), 'quote=1');
      }
    }
    elseif ($type == 'node' && variable_get("quote_{$post->type}_enabled", 0) && $post->comment == COMMENT_NODE_READ_WRITE) {
      // Display quote link for comments only if the node is accepting comments.
      $links[] = l(t('quote'), "comment/reply/$post->nid/", array('title' => t('Quote this post in your reply.')), 'quote=1');
    }
  }

  return $links;
}

/**
 * Implementation of hook_filter().
 */
function quote_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Quote filter'));
    case 'description':
      return t('Converts [quote] tags into &lt;div&gt; tags. Must apply after HTML filters.');
    case 'process':
      return _quote_filter_process($text);
    default:
      return $text;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function quote_form_alter($form_id, &$form) {
  switch ($form_id) {
    case 'comment_form':
      if (isset($_GET['quote']) && $_GET['quote']) {
        $nid = arg(2);
        $cid = arg(3);

        if ($cid) {
          $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = 0', $cid));

          if ($comment->uid) {
            $author = $comment->registered_name;
          }
          else {
            $author = (!empty($comment->name)) ? $comment->name : variable_get('anonymous', 'Anonymous');
          }
          $quote = $comment->comment;
          $subject = $comment->subject;
        }
        elseif ($nid) {
          $node = node_load(array('nid' => $nid));
          $quote = $node->body;
          $author = !empty($node->name) ? $node->name : variable_get('anonymous', 'Anonymous');
        }
        $form['comment_filter']['comment']['#default_value'] = '[quote='. $author .']'. $quote ."[/quote]\n";
        $form['subject']['#required'] = TRUE;
      }
      break;
    case $form['type']['#value'] .'_node_settings':
      $node->type = $form['type']['#value'];
      $form['quote_settings'] = array(
        '#type' => 'fieldset',
        '#title' => t('Quote filter settings'),
        '#weight' => 0,
        '#collapsible' => TRUE,
        '#collapsed' => FALSE,
      );
      $form['quote_settings']["quote_{$node->type}_enabled"] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable the quote filter for the %node-type type.', array('%node-type' => $node->type)),
        '#default_value' => variable_get("quote_{$node->type}_enabled", 0),
      );
  }
}

/**
 * Replace [quote] tags with markup for display.
 */
function _quote_filter_process($text) {
  // Quoting with or without specifying the source
  // Thanks: function based on code from punbb.org
  if (strpos($text, '[quote') !== FALSE) {
    $text = str_replace('[quote]', '<div class="quote-msg"><div class="quote-author">'. t('Quote:') .'</div>', $text);
    $text = str_replace('[quote=]', '<div class="quote-msg"><div class="quote-author">'. t('Quote:') .'</div>', $text);
    $text = preg_replace('#\[quote=(?:&quot;|"|\')?(.*?)["\']?(?:&quot;|"|\')?\]#si', '<div class="quote-msg"><div class="quote-author">'. t('%name wrote:', array('%name' => '\\1')). '</div>', $text);
    $text = str_replace('[/quote]', '</div>', $text);
  }
  return $text;
}
