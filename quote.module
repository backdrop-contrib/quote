<?php

/**
 * @file
 * The quote module provides a filter and appropriate links that allow users to
 * quote nodes and other comments in their own comments.
 */

/**
 * Implements hook_help().
 */
function quote_help($path, $arg) {

}

/**
 * Implements hook_permission().
 */
function quote_permission() {
  return [
    'administer quote' => [
      'title' => t('Administer Quote module')],
    'use quote' => [
      'title' => t('Use Quote module')],
    ];
}

/**
 * Implements hook_node_view().
 */
function quote_node_view($node, $view_mode) {
/*  if (user_access('post comments') && in_array($node->type, _quote_variable_get('node_types')) && $node->comment == COMMENT_NODE_OPEN && _quote_variable_get('node_link_display')) {
    $links['quote'] = array(
      'title' => t('Quote'),
      'href' => "comment/reply/$node->nid",
      'attributes' => array('title' => t('Quote this post in your reply.')),
      'query' => array('quote' => 1),
      'fragment' => 'comment-form'
    );

    $node->content['links']['comment']['#links']['quote'] = $links['quote'];
    if (empty($node->content['links']['comment']['#attributes']['class'])) {
      $node->content['links']['comment']['#attributes']['class'] = array('links', 'inline');
    }
    else {
      $node->content['links']['comment']['#attributes']['class'] += array('links', 'inline');
    }
  }*/
  if (user_access('post comments')) {
    drupal_add_js(drupal_get_path('module', 'quote') . '/js/quote.js');

    $links['node-quote-sel'] = [
      'title' => t('quote selected'),
      'href' => '',
      'attributes' => ['title' => t('Quote selected text in your reply.')],
      'query' => '',
      'fragment' => ''
    ];
    $node->content['links']['comment']['#links']['node-quote-sel'] = $links['node-quote-sel'];

    $links['node-quote-all'] = [
      'title' => t('quote all'),
      'href' => '',
      'attributes' => ['title' => t('Quote selected text in your reply.')],
      'query' => '',
      'fragment' => ''
    ];
    $node->content['links']['comment']['#links']['node-quote-all'] = $links['node-quote-all'];

    /*$links['node-quote'] = [
      'title' => t('reply and quote'),
      'href' => "comment/reply/$node->nid/",
      'attributes' => ['title' => t('Quote text in your reply.')],
      'query' => ['node-quote' => 1],
      'fragment' => ''
    ];
    $node->content['links']['comment']['#links']['node-quote'] = $links['node-quote'];*/
  }
}

/**
 * Implements hook_comment_view().
 */
function quote_comment_view($comment) {
/*  if (user_access('post comments')) {
    $node = node_load($comment->nid);
    if (in_array($node->type, _quote_variable_get('node_types')) && $node->comment == COMMENT_NODE_OPEN) {
      $links['quote'] = array(
        'title' => t('quote'),
        'href' => "comment/reply/$node->nid/$comment->cid",
        'attributes' => array('title' => t('Quote this post in your reply.')),
        'query' => array('quote' => 1),
        'fragment' => 'comment-form'
      );

      $comment->content['links']['comment']['#links']['quote'] = $links['quote'];
      if (empty($comment->content['links']['comment']['#attributes']['class'])) {
        $comment->content['links']['comment']['#attributes']['class'] = array('links', 'inline');
      }
      else {
        $comment->content['links']['comment']['#attributes']['class'] += array('links', 'inline');
      }
    }
  }*/
  if (user_access('post comments')) {
    drupal_add_js(drupal_get_path('module', 'quote') . '/js/quote.js');

    $links['comment-quote-sel'] = [
      'title' => t('quote selected'),
      'href' => '',
      'attributes' => ['title' => t('Quote selected text in your reply.')],
      'query' => '',
      'fragment' => ''
    ];
    $comment->content['links']['comment']['#links']['comment-quote-sel'] = $links['comment-quote-sel'];

    $links['comment-quote-all'] = [
      'title' => t('quote all'),
      'href' => '',
      'attributes' => ['title' => t('Quote all text in your reply.')],
      'query' => '',
      'fragment' => ''
    ];
    $comment->content['links']['comment']['#links']['comment-quote-all'] = $links['comment-quote-all'];

    /*$node = node_load($comment->nid);
    $links['comment-quote'] = [
      'title' => t('reply and quote'),
      'href' => "comment/reply/$node->nid/$comment->cid",
      'attributes' => ['title' => t('Quote text in your reply.')],
      'query' => ['comment-quote' => 1],
      'fragment' => ''
    ];
    $comment->content['links']['comment']['#links']['comment-quote'] = $links['comment-quote'];*/
  }
}

/**
 * Implements hook_form_alter().
 */
function quote_form_alter(&$form, &$form_state, $form_id) {
  //drupal_set_message($_GET['comment-quote']);

  if ($form['#id'] == 'comment-form' && (isset($_POST['comment-quote'])) ) {
    /*$nid = arg(2);
    $cid = arg(3);

    if ($cid || _quote_variable_get('node_link_display')) {
      extract(_quote_get_quoted_data($nid, $cid));
      $quote = "[quote=$author]" . trim($content) . "[/quote]\n";

      $language = $form['comment_body']['#language'];
      if (array_key_exists('#default_value', $form['comment_body'][$language][0])) {
        // Add quoted text and preserve existing content (signature etc.).
        $form['comment_body'][$language][0]['#default_value'] = $quote . $form['comment_body'][$language][0]['#default_value'];
      }
      else {
        $form['comment_body'][$language][0]['value']['#default_value'] = $quote . $form['comment_body'][$language][0]['value']['#default_value'];
      }

      // Set the text format to the format selected in the quote configuration
      // page.
      $form['comment_body'][$language][0]['#format'] = _quote_variable_get('format');

      // The Form API, by default, drops name-value pairs from the form's action
      // URL (besides ?q=). Manually adding it back in as a hidden element.
      $form['quote'] = array(
        '#type' => 'hidden',
        '#value' => 1
      );
    }*/
  }
}

/**
 * Retrieve the content to be quoted.
 *
 * @param $nid
 *   The referring node's ID.
 * @param $cid
 *   The referring comment's ID (if applying).
 *
 * @return array
 *   The referring object's data as:
 *   - content: Node body or comment content
 *   - author : Display name of the object's author
 */
/*function _quote_get_quoted_data($nid, $cid = NULL) {
  if ($cid) {
    $quoted_comment = comment_load($cid);
    $language = field_language('comment', $quoted_comment, 'comment_body', $quoted_comment->language);
    $quoted_user_name = check_plain(format_username(user_load($quoted_comment->uid)));
    $quoted_content = $quoted_comment->comment_body[$language][0]['value'];
  }
  else {
    $quoted_node = node_load($nid);
    $language = field_language('node', $quoted_node, 'body', $quoted_node->language);
    $quoted_user_name = check_plain(format_username(user_load($quoted_node->uid)));
    $quoted_content = $quoted_node->body[$language][0]['value'];
  }

  if (_quote_variable_get('format')) {
    $quoted_content = check_markup($quoted_content, _quote_variable_get('format'), $language);
  }

  $ret = array('content' => $quoted_content, 'author' => $quoted_user_name);

  return $ret;
}*/
