<?php
/* $Id$ */

/**
 * Implementation of hook_help().
 */
function quote_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allow users to quote other posts in their reply');
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function quote_filter_tips($delta, $format, $long = false) {
  return t('You may quote other posts using [quote] tags.');
}

/**
 * Implementation of hook_link().
 */
function quote_link($type, $node = 0, $main = 0) {
  $links = array();
  if ($type == 'node' && user_access('post comments') && $node->comment == 2) {
    $links[] = l(t('quote'), "comment/reply/$node->nid", array('title' => t('Start your new comment with a quote from this post.')), 'quote=1');
  }
  elseif ($type == 'comment' && user_access('post comments') && node_comment_mode($node->nid) == 2) {
    $links[] = l(t('quote'), "comment/reply/$node->nid/$node->cid", array('title' => t('Start your reply with a quote from this comment.')), 'quote=1');
  }
  return $links;
}

/**
 * Implementation of hook_init().
 */
function quote_init() {
  if ($_GET['quote']) {
    $nid = arg(2);
    $cid = arg(3);
    if ($cid) {
      $comment = db_fetch_object(db_query("SELECT c.*, u.uid, u.name, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = 0", $cid));
      $msg = $comment->comment;
      $author = $comment->name;
      $subject = $comment->subject;
      $_POST['edit']['pid'] = $cid;
    }
    elseif ($nid) {
      $node = node_load(array('nid' => $nid));
      $msg = $node->body;
      $author = $node->name;
      $subject = $node->title;
    }
    $_POST['edit']['comment'] = '[quote='.$author.']'.$msg.'[/quote]'."\n";
    if (strpos($subject, 'Re:') === false) {
      $subject = 'Re: ' . $subject;
    }
    $_POST['edit']['subject'] = $subject;
    $_POST['edit']['nid'] = $nid;
    $_POST['op'] = 'Preview comment'; //can't use t() this early in the request? getting locale error
  }
}

/**
 * Implementation of hook_menu().
 */
function quote_menu($may_cache) {
  if (!$may_cache) {
    drupal_set_html_head(quote_html_head());
  }
}

function quote_html_head() {
  return '<link type="text/css" rel="stylesheet" href="'. module_get_path('quote') .'/quote.css" />';
}

/**
 * Implementation of hook_filter().
 */
function quote_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Quote filter'));
    case 'process':
      return _quote_filter_process($text);
    case 'description':
      return t('Allows users to quote other posts using [quote] tags.');
    default:
      return $text;
  }
}

function _quote_filter_process($text) {
  // Quoting with or without specifying the source (code borrowed from bbcode.module)
  // TODO: Allow for nested [quote] tags
  $preg = array('#\[quote(?::\w+)?\](?:[\r\n])*(.*?)\[/quote(?::\w+)?\]#si' => '<div class="quote-author">'.t("Quote:").'</div><div class="quote-msg">\\1</div>',
  '#\[quote=(?:&quot;|"|\')?(.*?)["\']?(?:&quot;|"|\')?\](?:[\r\n])*(.*?)\[/quote(?::\w+)?\]#si' => '<div class="quote-author">'.t('%author wrote:', array('%author' => '\\1')).'</div><div class="quote-msg">\\2</div>');

  $filtered = preg_replace(array_keys($preg), array_values($preg), $text);

  return $filtered;
}

?>
