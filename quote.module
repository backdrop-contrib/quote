<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function quote_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows users to quote other posts.');
  }
}

/**
 * Implementation of hook_filter_tips().
 */
function quote_filter_tips($delta, $format, $long = false) {
  if ($long) {
    return t('
    <h3 id=filter-quote>Quote filter</h3>
    <p>Quoted content can be placed between [quote] tags in order to be displayed as an indented quote. Every [quote] tag <em>must</em> have a corresponding [/quote] tag. For example: 
   <pre>[quote]This is a simple quote.[/quote]</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Quote:</div>This is a simple quote.</div>
    <p>Additionally, there is an optional attribute which allows quotes to specify the original author.
    <pre>[quote=Mr. Drupal]This is a quote with an attribution line.[/quote]
</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Mr. Drupal wrote:</div>This is a quote with an attribution line.</div>
    <p>Finally, multiple [quote] tags can be nested within one another. Just remember that every [quote] tag <strong>must</strong> have a corresponding [/quote] tag.
    <pre>
    [quote]I think she says it best...
    [quote=Ms. Quotation]This is a quote nested within another quote.[/quote]
    but you can\'t argue with
    [quote=Ms. Reply]The more quotes, the merrier.
    Just don\'t get too carried away.[/quote]
    And I have nothing more to say.[/quote]</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Quote:</div>I think she says it best...
    <div class="quote-msg"><div class="quote-author">Ms. Quotation wrote:</div>This is a quote nested within another quote.</div>
    but you can\'t argue with
    <div class="quote-msg"><div class="quote-author">Ms. Reply wrote:</div>The more quotes, the merrier. Just don\'t get too carried away.</div>
    And I have nothing more to say.</div>
    ');
  }
  else {
    return t('You may quote other posts using <a href="%quote_help">[quote] tags</a>.', array("%quote_help" => url("filter/tips/$format", NULL, 'filter-quote')));
  }
}

/**
 * Implementation of hook_link().
 */
function quote_link($type, $node = 0, $main = 0) {
  $links = array();
  if ($type == 'node' && user_access('post comments') && $node->comment == 2) {
    $links[] = l(t('quote'), "comment/reply/$node->nid", array('title' => t('Start your new comment with a quote from this post.')), 'quote=1');
  }
  elseif ($type == 'comment' && user_access('post comments') && node_comment_mode($node->nid) == 2) {
    $links[] = l(t('quote'), "comment/reply/$node->nid/$node->cid", array('title' => t('Start your reply with a quote from this comment.')), 'quote=1');
  }
  return $links;
}

/**
 * Implementation of hook_menu().
 */
function quote_menu($may_cache) {
  if (!$may_cache) {
    // reference quote.css, if it exists
    $quotecss = drupal_get_path('module', 'quote') .'/quote.css';
    if (file_exists($quotecss)) {
      drupal_set_html_head(quote_html_head($quotecss));
    }

    // if quoting, generate comment body
    if ($_GET['quote']) {
      $nid = arg(2);
      $cid = arg(3);
      if ($cid) {
        $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name, u.picture, u.data FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = 0', $cid));
        $msg = $comment->comment;
        $author = $comment->name = $comment->uid ? $comment->registered_name : $comment->name;
        $subject = $comment->subject;
        $_POST['edit']['pid'] = $cid;
      }
      elseif ($nid) {
        $node = node_load(array('nid' => $nid));
        $msg = $node->body;
        $author = $node->name;
        $subject = $node->title;
      }
      $_POST['edit']['comment'] = '[quote='.$author.']'.$msg.'[/quote]'."\n";
      if (strpos($subject, t('Re:')) === false) {
        $subject = t('Re:') .' '. $subject;
      }
      $_POST['edit']['subject'] = $subject;
      $_POST['edit']['nid'] = $nid;
      $_POST['op'] = t('Preview comment');
    }
  }
}

function quote_html_head($quotecss) {
  return '<link rel="stylesheet" type="text/css" href="'.$quotecss.'" />';
}

/**
 * Implementation of hook_filter().
 */
function quote_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Quote filter'));
    case 'description':
      return t('Converts [quote] tags into &lt;div&gt; tags. Must apply after HTML filters.');
    case 'process':
      return _quote_filter_process($text);
    default:
      return $text;
  }
}

function _quote_filter_process($text) {
  // Quoting with or without specifying the source
  // Thanks: function based on code from punbb.org
  if (strpos($text, '[quote') !== FALSE) {
    $text = str_replace('[quote]', '<div class="quote-msg"><div class="quote-author">'. t('Quote:') .'</div>', $text);

    $text = str_replace('[quote=]', '<div class="quote-msg"><div class="quote-author">'. t('Quote:') .'</div>', $text);

    $text = preg_replace('#\[quote=(?:&quot;|"|\')?(.*?)["\']?(?:&quot;|"|\')?\]#si', '<div class="quote-msg"><div class="quote-author">'. t('%name wrote:', array('%name' => '\\1')). '</div>', $text);

    $text = str_replace('[/quote]', '</div>', $text);
  }
  return $text;
}

?>
