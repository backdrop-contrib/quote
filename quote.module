<?php
// $Id$

/**
 * Implementation of hook_help().
 */
function quote_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows users to quote other posts.');
    case 'admin/quote':
      return t('<p>The quote filter allows users to quote other posts in their comments. Besides the following settings, the quote filter will need to be enabled for each <a href="%input-format">input format</a> (as required). For more information, please visit the <a href="%project-page">project page</a>.</p>', array('%input-format' => 'admin/filters', '%project-page' => url('http://drupal.org/project/quote', NULL, NULL, TRUE)));
  }
}

/**
 * Implementation of hook_menu().
 */
function quote_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/quote',
      'title' => t('quote'),
      'callback' => 'quote_settings_form',
      'access' => user_access('administer filters'),
    );
  }
  else {
    // Reference quote.css, if it exists.
    theme_add_style(drupal_get_path('module', 'quote') .'/quote.css');
  }

  return $items;
}

/**
 * Implementation of hook_filter_tips().
 */
function quote_filter_tips($delta, $format, $long = FALSE) {
  if ($long) {
    return t('
    <h3 id="filter-quote">Quote filter</h3>
    <p>Quoted content can be placed between [quote] tags in order to be displayed as an indented quote. Every [quote] tag <em>must</em> have a corresponding [/quote] tag. For example: 
   <pre>[quote]This is a simple quote.[/quote]</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Quote:</div>This is a simple quote.</div>
    <p>Additionally, there is an optional attribute which allows quotes to specify the original author.
    <pre>[quote=Mr. Drupal]This is a quote with an attribution line.[/quote]
</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Mr. Drupal wrote:</div>This is a quote with an attribution line.</div>
    <p>Finally, multiple [quote] tags can be nested within one another. Just remember that every [quote] tag <strong>must</strong> have a corresponding [/quote] tag.
    <pre>
    [quote]I think she says it best...
    [quote=Ms. Quotation]This is a quote nested within another quote.[/quote]
    but you can\'t argue with
    [quote=Ms. Reply]The more quotes, the merrier.
    Just don\'t get too carried away.[/quote]
    And I have nothing more to say.[/quote]</pre> is displayed as:</p>
    <div class="quote-msg"><div class="quote-author">Quote:</div>I think she says it best...
    <div class="quote-msg"><div class="quote-author">Ms. Quotation wrote:</div>This is a quote nested within another quote.</div>
    but you can\'t argue with
    <div class="quote-msg"><div class="quote-author">Ms. Reply wrote:</div>The more quotes, the merrier. Just don\'t get too carried away.</div>
    And I have nothing more to say.</div>
    ');
  }
  else {
    return t('You may quote other posts using <a href="%quote_help">[quote] tags</a>.', array("%quote_help" => url("filter/tips/$format", NULL, 'filter-quote')));
  }
}

/**
 * Implementation of hook_link().
 */
function quote_link($type, $post = 0, $main = 0) {
  $links = array();

  if (user_access('post comments')) {
    // $post can be either a node or a comment.
    if ($type == 'comment') {
      // Display quote link for comments only if the parent node is accepting comments and has the quote filter enabled.
      $node = node_load(arg(1));
      if (in_array($node->type, variable_get('quote_node_types', array())) && $node->comment == COMMENT_NODE_READ_WRITE) {
        $links[] = l(t('quote'), "comment/reply/$post->nid/$post->cid/", array('title' => t('Quote this comment in your reply.')), 'quote=1');
      }
    }
    elseif ($type == 'node' && in_array($post->type, variable_get('quote_node_types', array())) && $post->comment == COMMENT_NODE_READ_WRITE && variable_get('quote_node_link_display', 0)) {
      // Display quote link for nodes only if the node is accepting comments, has the quote filter enabled and has quote_link_display set.
      $links[] = l(t('quote'), "comment/reply/$post->nid/", array('title' => t('Quote this post in your reply.')), 'quote=1');
    }
  }

  return $links;
}

/**
 * Implementation of hook_filter().
 */
function quote_filter($op, $delta = 0, $format = -1, $text = '') {
  switch ($op) {
    case 'list':
      return array(0 => t('Quote filter'));
    case 'description':
      return t('Converts [quote] tags into &lt;div&gt; tags. Must apply after HTML filters.');
    case 'process':
      return _quote_filter_process($text);
    default:
      return $text;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function quote_form_alter($form_id, &$form) {
  if ($form_id == 'comment_form' && isset($_GET['quote']) && $_GET['quote']) {
    $nid = arg(2);
    $cid = arg(3);

    if ($cid) {
      $comment = db_fetch_object(db_query('SELECT c.*, u.uid, u.name AS registered_name FROM {comments} c INNER JOIN {users} u ON c.uid = u.uid WHERE c.cid = %d AND c.status = 0', $cid));

      if ($comment->uid) {
        $author = $comment->registered_name;
      }
      else {
        $author = (!empty($comment->name)) ? $comment->name : variable_get('anonymous', 'Anonymous');
      }
      $quote = $comment->comment;
      $subject = $comment->subject;
    }
    elseif ($nid && variable_get('quote_node_link_display', 0)) {
      $node = node_load(array('nid' => $nid));
      if (in_array($node->type, variable_get('quote_node_types', array()))) {
        $quote = $node->body;
        $author = !empty($node->name) ? $node->name : variable_get('anonymous', 'Anonymous');
      }
      else {
        return;
      }
    }
    else {
      return;
    }
    // Add quoted text and preserve existing content (signature etc.).
    $form['comment_filter']['comment']['#default_value'] = '[quote='. $author .']'. $quote ."[/quote]\n". $form['comment_filter']['comment']['#default_value'];
    $form['subject']['#required'] = TRUE;
  }
}

/**
 * Menu Callback: quote module settings form. Not using hook_settings due to the checkboxes element.
 */
function quote_settings_form() {
  $form['quote'] = array('#type' => 'fieldset', '#title' => 'Quote module settings');
  $form['quote']['quote_node_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Node associations'),
    '#description' => t('Select the node types to associate with the quote filter.'),
    '#options' => node_get_types(),
    '#default_value' => variable_get('quote_node_types', array()),
  );
  $form['quote']['quote_node_link_display'] = array(
    '#type' => 'checkbox',
    '#title' => t('Display the quote link for nodes'),
    '#description' => t('Leave this option disabled if you use a PHP or similar filter in your nodes. The quote link is always displayed for comments.'),
    '#default_value' => variable_get('quote_node_link_display', 0),
  );
  $form['submit'] = array('#type' => 'submit', '#value' => 'Save configuration');

  return drupal_get_form('quote_settings_form', $form);
}

/**
 * Process quote settings form submissions.
 */
function quote_settings_form_submit($form_id, $form_values) {
  $types = array_filter($form_values['quote_node_types']);
  variable_set('quote_node_types', array_keys($types));
  variable_set('quote_node_link_display', $form_values['quote_node_link_display']);

  drupal_set_message('Configuration settings saved.');
  cache_clear_all();
}

/**
 * Replace [quote] tags with markup for display.
 * @todo Fix this with one preg_replace.
 */
function _quote_filter_process($text) {
  // Thanks: function based on code from punbb.org
  if (strstr($text, '[quote')) {
    $pre = '<div class="quote-msg"><div class="quote-author">';
    $post = '</div>';
    $markup = $pre . t('Quote:') . $post;
    $text = str_replace(array('[quote]', '[quote=]', '[/quote]'), array($markup, $markup, $post), $text);
    $text = preg_replace('#\[quote=(?:"|\')?(.*?)["\']?(?:"|\')?\]#s', $pre . t('%name wrote:', array('%name' => '\\1')) . $post, $text);
  }
  return $text;
}
